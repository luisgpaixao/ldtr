# Monthly fixed payment (standard amortized loan)
monthly_payment = balance * (monthly_rate * (1 + monthly_rate)^n_months) /
((1 + monthly_rate)^n_months - 1)
if (verbose) {
cat(sprintf("Monthly payment: %.2f EUR\n", monthly_payment))
}
while (balance > 0 && month <= 1000 * 12) {
interest = balance * monthly_rate
principal_payment = min(monthly_payment - interest, balance)
extra = 0
# Add extra yearly payment
if (((month - start_month) %% extra_payment_freq) == 0 && balance > principal_payment) {
extra = min(extra_payment, balance - principal_payment)
}
total_principal = principal_payment + extra
balance = balance - total_principal
amortization = rbind(amortization, data.frame(
Month = month,
Payment = monthly_payment,
Interest = interest,
Principal = principal_payment,
ExtraPayment = extra,
RemainingBalance = balance
))
month = month + 1
}
total_interest = sum(amortization$Interest)
total_months = nrow(amortization)
if (verbose) {
cat(sprintf("Total interest paid: %.2f EUR\n", total_interest))
cat(sprintf("Loan paid off in %d months (%.2f years)\n", total_months, total_months / 12))
}
return(amortization)
}
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03,
term_years = 33,
extra_payment = 0,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 0,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 2000,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 1000,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 3000,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Plot amortization schedule
library(ggplot2)
ggplot(schedule, aes(x = Month)) +
geom_line(aes(y = RemainingBalance), color = "steelblue") +
labs(title = "Remaining Loan Balance Over Time",
y = "Remaining Balance (€)",
x = "Month")
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 1250,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
schedule
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 1250,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 0,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 500,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 1250,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 1300,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 0,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 1250,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 2500,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
simulate_mortgage = function(
principal = 110000,        # Remaining loan amount
annual_rate = 0.03,        # Annual interest rate (e.g., 3%)
term_years = 35,           # Remaining term (40 - 5 years already paid)
extra_payment = 1000,      # Annual early payment
extra_payment_freq = 12,   # Frequency in months (12 = yearly)
start_month = 1,           # When the extra payments start (e.g., 1 = start now)
verbose = TRUE
) {
monthly_rate = annual_rate / 12
n_months = term_years * 12
month = 1
balance = principal
amortization = data.frame(
Month = integer(0),
Payment = numeric(0),
Interest = numeric(0),
Principal = numeric(0),
ExtraPayment = numeric(0),
RemainingBalance = numeric(0)
)
# Monthly fixed payment (standard amortized loan)
monthly_payment = balance * (monthly_rate * (1 + monthly_rate)^n_months) /
((1 + monthly_rate)^n_months - 1)
if (verbose) {
cat(sprintf("Monthly payment: %.2f EUR\n", monthly_payment))
}
while (balance > 0 && month <= 1000 * 12) {
interest = balance * monthly_rate
principal_payment = min(monthly_payment - interest, balance)
extra = 0
# Add extra yearly payment
if (((month - start_month) %% extra_payment_freq) == 0 && balance > principal_payment) {
extra = min(extra_payment, balance - principal_payment)
}
total_principal = principal_payment + extra
balance = balance - total_principal
amortization = rbind(amortization, data.frame(
Month = month,
Payment = monthly_payment,
Interest = interest,
Principal = principal_payment,
ExtraPayment = extra,
RemainingBalance = balance
))
month = month + 1
}
total_interest = sum(amortization$Interest)
total_months = nrow(amortization)
if (verbose) {
cat(sprintf("Total interest paid: %.2f EUR\n", total_interest))
cat(sprintf("Loan paid off in %d months (%.2f years)\n", total_months, total_months / 12))
}
return(list(amo = amortization, monthly_payment = monthly_payment,
total_interest = total_interest,
total_months = total_months / 12))
}
# Example use
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 2500,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
# Example use
schedule0 = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 0,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
schedule0
schedule0$total_interest
seq(1300, 3000, 100)
total_ints = schedule0$total_interest
df = data.frame()
for(i in seq(1300, 3000, 100)){
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = i,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
df = rbind(df, c(i, schedule$total_interest))
}
total_ints = schedule0$total_interest
df = data.frame()
for(i in seq(1300, 3000, 100)){
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = i,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
df = rbind(df, c(i, total_ints-schedule$total_interest))
}
names(df) = c("Amort", "Saving")
df
library(ggplot2)
ggplot(df, aes(x = Amort)) +
geom_line(aes(y = Saving), color = "steelblue") +
labs(title = "Remaining Loan Balance Over Time",
y = "Remaining Balance (€)",
x = "Month")
total_ints = schedule0$total_interest
df = data.frame()
for(i in seq(1300, 3000, 100)){
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = i,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
df = rbind(df, c(i, schedule$total_months))
}
names(df) = c("Amort", "Saving")
ggplot(df, aes(x = Amort)) +
geom_line(aes(y = Saving), color = "steelblue") +
labs(title = "Remaining Loan Balance Over Time",
y = "Remaining Balance (€)",
x = "Month")
# Main
schedule0 = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = 0,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
total_ints = schedule0$total_interest
df = data.frame()
for(i in seq(1300, 3000, 100)){
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = i,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
df = rbind(df, c(i, total_ints-schedule$total_interest))
}
names(df) = c("Amort", "Saving")
df
total_ints = schedule0$total_interest
df = data.frame()
for(i in seq(1300, 5000, 100)){
schedule = simulate_mortgage(
principal = 110000,
annual_rate = 0.03285,
term_years = 33,
extra_payment = i,         # Annual early payment
extra_payment_freq = 12       # Once a year
)
df = rbind(df, c(i, total_ints-schedule$total_interest))
}
names(df) = c("Amort", "Saving")
ggplot(df, aes(x = Amort)) +
geom_line(aes(y = Saving), color = "steelblue") +
labs(title = "Remaining Loan Balance Over Time",
y = "Remaining Balance (€)",
x = "Month")
df
write.table(df, "D:/credito.csv", row.names = F, sep = ";")
# MAIN
canecas = 0
medias = 6
minis = 0
mini20 = 0
vinho = 2/3 # percentagem 1 garrafa de 750 ml
kcal = (((canecas*0.5) + (medias*0.33) + (minis*0.25) + (mini20*0.2)) * tresh_beer_1L) + (vinho * tresh_vinho_750)
liters = kcal/tresh_beer_1L
date = as.character(Sys.Date())
insert_data_beer(date, liters, kcal)
library(RPostgreSQL)
library(DBI)
library(lubridate)
# DBs
beer_DB = "track_beer"
# variaveis fixas
tresh_vinho_750 = 660
tresh_beer_1L = 400
# liga a DB local entregaveis
connect_DB = function(DB_name){
dsn_database = DB_name  # Specify the name of your Database
# Specify host name e.g.:"aws-us-east-1-portal.4.dblayer.com"
dsn_hostname = "localhost"
dsn_port = "5432"                # Specify your port number. e.g. 98939
dsn_uid = "postgres"         # Specify your username. e.g. "admin"
dsn_pwd = "Estemailemeu00!"        # Specify your password. e.g. "xxx"
drv = dbDriver("PostgreSQL")
con = dbConnect(drv,
dbname = dsn_database, host=dsn_hostname,
port=dsn_port, user=dsn_uid,
password=dsn_pwd)
return(con)
}
insert_data_beer = function(date, liters, kcal){
record = get_data_beer(date, date)
con = connect_DB(beer_DB)
if(nrow(record) == 0){
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(date, liters, kcal)
)
cat("Record inserted\n")
}else{
cat("Date already as a record\n")
}
month = strsplit(date, "-")[[1]][2]
year = strsplit(date, "-")[[1]][1]
sufix = paste0(year, "-", month, "-")
print(get_data_beer(paste0(sufix, "01"), paste0(sufix, days_in_month(date))))
get_month_stats_beer(month, year)
dbDisconnect(con)
}
get_data_beer = function(str_date, end_date){
con = connect_DB(beer_DB)
query = paste0(" SELECT * FROM beer_l WHERE date BETWEEN '", str_date, "' AND '", end_date, "'")
result = dbGetQuery(con, query)
dbDisconnect(con)
return(result)
}
get_month_stats_beer = function(month, year){
str_date = paste0(year, "-",month, "-01")
days_in_month = days_in_month(str_date)
end_date = paste0(year, "-",month, "-", days_in_month)
data = get_data_beer(str_date, end_date)
data = data[order(data$date), ]
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_month)
avr_ltrs = as.numeric(litres/days_in_month)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
print(data)
}
get_year_stats_beer = function(year){
str_date = paste0(year, "-01-01")
end_date = paste0(year, "-12-31")
days_in_year = as.numeric(ymd(end_date) - ymd(str_date) + 1)
data = get_data_beer(str_date, end_date)
data = data[order(data$date), ]
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_year)
avr_ltrs = as.numeric(litres/days_in_year)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
print(data)
}
# MAIN
canecas = 0
medias = 6
minis = 0
mini20 = 0
vinho = 2/3 # percentagem 1 garrafa de 750 ml
kcal = (((canecas*0.5) + (medias*0.33) + (minis*0.25) + (mini20*0.2)) * tresh_beer_1L) + (vinho * tresh_vinho_750)
liters = kcal/tresh_beer_1L
date = as.character(Sys.Date())
insert_data_beer(date, liters, kcal)
source("C:/Users/LGP/code/ifap_sigpac/entregaveis_fun.R")
rows = getAllRows("PT")
serc = c("034", "035", "037", "038")
all = c()
for(i in serc){
filter = grepl(i, rows$proj_name)
print(data.frame(rows$herdade[filter], rows$proj_name[filter]))
all = c(all, rows$herdade[filter])
# print(paste(rows$herdade[filter], collapse = ", "))
}
paste(all, collapse = ", ")
vec_parcels = c(133760, 133868, 133874, 133683, 133840)
# 3
for(i in vec_parcels){
{
parcelID = i
dados = list_from_DB(parcelID)
anos = seq(dados$ano_b-3, dados$ano_b, 1)
dateStart = '2023-01-01'
dateEnd = '2024-12-31'
# entregaveis
pathEnt = paste0(dados$pathacc, "/Entregaveis/", dados$proj_name, "/")
if(!dir.exists(pathEnt)){
dir.create(pathEnt, recursive = T)
}
}
obra3(dados$path, dados$field, NULL, dados$parcels$herdade, dados$parcels$envolvente,
dados$ano_b, anos, "white", pathEnt, dados$country)
}
install.packages("chromote")
install.packages("chromote")
Sys.setenv(CHROME_HEADLESS = "--headless=new")
source("C:/Users/LGP/code/ifap_sigpac/entregaveis_fun.R")
vec_parcels = c(133760, 133868, 133874, 133683, 133840)
# 3
for(i in vec_parcels){
{
parcelID = i
dados = list_from_DB(parcelID)
anos = seq(dados$ano_b-3, dados$ano_b, 1)
dateStart = '2023-01-01'
dateEnd = '2024-12-31'
# entregaveis
pathEnt = paste0(dados$pathacc, "/Entregaveis/", dados$proj_name, "/")
if(!dir.exists(pathEnt)){
dir.create(pathEnt, recursive = T)
}
}
obra3(dados$path, dados$field, NULL, dados$parcels$herdade, dados$parcels$envolvente,
dados$ano_b, anos, "white", pathEnt, dados$country)
}
foldD = choose.dir(default = default_fold)
listF = list.files(foldD, pattern = ".shp$", full.names = T, recursive = F)
foldD = choose.dir(default = default_fold)
source("C:/Users/LGP/code/ifap_sigpac/entregaveis_fun.R")
foldD = choose.dir(default = default_fold)
listF = list.files(foldD, pattern = ".shp$", full.names = T, recursive = F)
listF
for( i in listF ){
# nameO = strsplit(i, "_pontos_")[[1]][1]
# nameO = paste0(nameO, ".kml")
nameO = gsub(".shp", ".kml", i)
SHP_to_KML(i, nameO, NULL,"Name")
}
gg = get_EvidPoints(588, 133892, '2022-01-01', '2025-12-31', "D:/AgroInsider/Projectos/Temp_Folder/evidCheck/")
check_Parcel(133892)$poly
terra::vect(check_Parcel(133892)$poly)
shp = terra::vect(check_Parcel(133892)$poly)
shp$name = "teste"
shp
shp = terra::vect(check_Parcel(133892)$poly)
shp$ID = args[3]
shp$Name = args[4]
shp
terra::writeVector("C:/Users/LGP/Downloads/OutputsPy/teste.kml")
terra::writeVector(shp, "C:/Users/LGP/Downloads/OutputsPy/teste.kml")
shp$ID = 133892
shp$Name = 'teste'
terra::writeVector(shp, "C:/Users/LGP/Downloads/OutputsPy/teste.kml")
terra::writeVector(shp, "C:/Users/LGP/Downloads/OutputsPy/teste.kml", overwrite=TRUE)
setwd("C:/Users/LGP/code/ldtr")
usethis::use_testthat()
usethis::use_test("classLDT")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::use_test("createLDT")
obj <- createLDT(T, 2, 'sta.shp', c('m1.shp', 'm2.shp'), 10, 10, T, T, 'out.shp')
library(ldtr)
obj <- createLDT(T, 2, 'sta.shp', c('m1.shp', 'm2.shp'), 10, 10, T, T, 'out.shp')
View(createLDT)
devtools::install_gitlab('lgplgp/ldtr')

dbSendQuery(
con,
"INSERT INTO beer_L (Date, Liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
dbDisconnect(con)
}
insert_data_beer("2025-01-01", 1, 2)
insert_data_beer = function(Date, Liters, kcal){
con = connect_DB("track_beer")
dbSendQuery(
con,
"INSERT INTO beer_l (Date, Liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
dbDisconnect(con)
}
insert_data_beer("2025-01-01", 1, 2)
insert_data_beer = function(Date, Liters, kcal){
con = connect_DB("track_beer")
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
dbDisconnect(con)
}
insert_data_beer("2025-01-01", 1, 2)
insert_data_beer("2024-01-01", 1, 2)
str_date = '2025-01-01'; end_date='2025-12-31'
paste0(" SELECT * FROM beer_l WHERE date_field BETWEEN '", str_date, "' AND '")
paste0(" SELECT * FROM beer_l WHERE date_field BETWEEN '", str_date, "' AND '", end_date, "'")
query = paste0(" SELECT * FROM beer_l WHERE date_field BETWEEN '", str_date, "' AND '", end_date, "'")
query
con = connect_DB("track_beer")
query = paste0(" SELECT * FROM beer_l WHERE date_field BETWEEN '", str_date, "' AND '", end_date, "'")
result = dbGetQuery(con, query)
con = connect_DB("track_beer")
query = paste0(" SELECT * FROM beer_l WHERE date BETWEEN '", str_date, "' AND '", end_date, "'")
result = dbGetQuery(con, query)
result
str_date
end_date
Sys.Date()
Sys.Date()-1
slope
terra::terrain(slope, opt = "flowacc")
terra::terrain(slope, v = "flowacc")
terra::terrain(slope, v = "flowdir")
flowdir = terra::terrain(slope, v = "flowdir")
flow_dir = terra::terrain(slope, v = "flowdir")
flow_acc = terra::flowAccumulation(flow_dir)
flow_acc = flowAccumulation(flow_dir)
library(whitebox)
dem = terra::vect("D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/HerdadeAroeira_herdade_MDT.tif")# shp
dem = terra::rast("D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/HerdadeAroeira_herdade_MDT.tif")# shp
wbt_flow_accumulation(input = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/HerdadeAroeira_herdade_MDT.tif",
output = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/Accum.tif",
out_type = "catchment area")
wbt_flow_accumulation_full_workflow(input = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/HerdadeAroeira_herdade_MDT.tif",
output = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/Accum.tif",
out_type = "catchment area")
wbt_flow_accumulation_full_workflow(dem = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/HerdadeAroeira_herdade_MDT.tif",
out_dem = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/Accum.tif")
wbt_flow_accumulation_full_workflow(dem = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/HerdadeAroeira_herdade_MDT.tif",
out_dem = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/AccumDem.tif",
out_pntr = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/AccumPointer.tif",
out_accum = "D:/AgroInsider/CO2/Docs/Restauro/Exercicio/Aroeira/shp/AccumFlow.tif")
# MAIN
canecas = 0
medias = 11
minis = 0
mini20 = 0
vinho = 0 # percentagem 1 garrafa de 750 ml
tresh_vinho_750 = 660
tresh_beer_1L = 400
library(RPostgreSQL)
library(DBI)
# DBs
beer_DB = "track_beer"
# variaveis fixas
tresh_vinho_750 = 660
tresh_beer_1L = 400
# liga a DB local entregaveis
connect_DB = function(DB_name){
dsn_database = DB_name  # Specify the name of your Database
# Specify host name e.g.:"aws-us-east-1-portal.4.dblayer.com"
dsn_hostname = "localhost"
dsn_port = "5432"                # Specify your port number. e.g. 98939
dsn_uid = "postgres"         # Specify your username. e.g. "admin"
dsn_pwd = "Estemailemeu00!"        # Specify your password. e.g. "xxx"
drv = dbDriver("PostgreSQL")
con = dbConnect(drv,
dbname = dsn_database, host=dsn_hostname,
port=dsn_port, user=dsn_uid,
password=dsn_pwd)
return(con)
}
insert_data_beer = function(Date, Liters, kcal){
con = connect_DB(beer_DB)
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
dbDisconnect(con)
}
get_data_beer = function(str_date, end_date){
con = connect_DB(beer_DB)
query = paste0(" SELECT * FROM beer_l WHERE date BETWEEN '", str_date, "' AND '", end_date, "'")
result = dbGetQuery(con, query)
dbDisconnect(con)
return(result)
}
# MAIN
canecas = 0
medias = 11
minis = 0
mini20 = 0
vinho = 0 # percentagem 1 garrafa de 750 ml
total = (((canecas*0.5) + (medias*0.33) + (minis*0.25) + (mini20*0.2)) * tresh_beer_1L) + (vinho * tresh_vinho_750)
total
data = Sys.Date() # -1
data
litros = total/tresh_beer_1L
litros
csv = read.csv("C:/Users/LGP/Downloads/Livro1.csv")
csv
csv = read.csv2("C:/Users/LGP/Downloads/Livro1.csv")
csv
names(csv) = c("Date", "kcal")
csv
for(i in 1:nrow(csv)){
if(csv$kcal[i] != 0){
insert_data_beer(csv$Date[i], csv$kcal[i]/tresh_beer_1L, csv$kcal[i])
}
}
Date = "2025-01-27"
record = get_data_beer(Date, Date)
record
nrow(record)
Date = "2025-01-28"
record = get_data_beer(Date, Date)
record
nrow(record)
insert_data_beer = function(Date, Liters, kcal){
record = get_data_beer(Date, Date)
if(nrow(record) == 0){
con = connect_DB(beer_DB)
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
dbDisconnect(con)
cat("Record inserted\n")
}else{
cat("Date already as a record\n")
}
}
total
total
litros
total = (((canecas*0.5) + (medias*0.33) + (minis*0.25) + (mini20*0.2)) * tresh_beer_1L) + (vinho * tresh_vinho_750)
litros = total/tresh_beer_1L
litros
Sys.Date()
insert_data_beer(Sys.Date(), litros, total)
library(lubridate)
year=2025
month=2
days_in_month = days_in_month(paste0(year, "-",month, "-01"))
days_in_month
first_day = paste0(year, "-",month, "-01")
days_in_month = days_in_month(first_day)
last_day = paste0(year, "-",month, "-", days_in_month)
last_day
first_day
month=1
first_day = paste0(year, "-",month, "-01")
days_in_month = days_in_month(first_day)
last_day = paste0(year, "-",month, "-", days_in_month)
str_date = paste0(year, "-",month, "-01")
days_in_month = days_in_month(str_date)
end_date = paste0(year, "-",month, "-", days_in_month)
data = get_data_beer(str_date, end_date)
data
avr_kcal = kcal/days_in_month
avr_ltrs = litres/days_in_month
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = kcal/days_in_month
avr_ltrs = litres/days_in_month
avr_kcal
avr_ltrs
kcal
litres
avr_kcal = as.numeric(kcal/days_in_month)
avr_ltrs = as.numeric(litres/days_in_month)
avr_kcal
avr_ltrs
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
ymd(str_date)
ymd(str_date) - ymd(end_date)
str_date = paste0(year, "-01-01")
end_date = paste0(year, "-12-31")
ymd(str_date) - ymd(end_date)
ymd(str_date) - ymd(end_date) + 1
ymd(end_date) - ymd(str_date) + 1
year=2024
ymd(end_date) - ymd(str_date) + 1
str_date = paste0(year, "-01-01")
end_date = paste0(year, "-12-31")
ymd(end_date) - ymd(str_date) + 1
get_month_stats_beer = function(month, year){
str_date = paste0(year, "-",month, "-01")
days_in_month = days_in_month(str_date)
end_date = paste0(year, "-",month, "-", days_in_month)
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_month)
avr_ltrs = as.numeric(litres/days_in_month)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
}
get_year_stats_beer = function(year){
str_date = paste0(year, "-01-01")
end_date = paste0(year, "-12-31")
days_in_year = ymd(end_date) - ymd(str_date) + 1
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_year)
avr_ltrs = as.numeric(litres/days_in_year)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
}
get_year_stats_beer(2024)
year
str_date = paste0(year, "-01-01")
end_date = paste0(year, "-12-31")
days_in_year = ymd(end_date) - ymd(str_date) + 1
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_year)
avr_ltrs = as.numeric(litres/days_in_year)
kcal
days_in_year
days_in_year = as.numeric(ymd(end_date) - ymd(str_date) + 1)
days_in_year
get_year_stats_beer = function(year){
str_date = paste0(year, "-01-01")
end_date = paste0(year, "-12-31")
days_in_year = as.numeric(ymd(end_date) - ymd(str_date) + 1)
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_year)
avr_ltrs = as.numeric(litres/days_in_year)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
}
get_year_stats_beer(2024)
get_year_stats_beer(2025)
dateStart = "2023-01-01"
dateEnd="2023-12-31"
band = "NDVI"
parcelID = 129466
URL = "https://api.agroinsider.com/agroinsider/api/agromap/0/parcel/images/B8LPnL!_tsF&pM/"
URL = paste0(URL,parcelID,"/",band,"/",dateStart,"/",dateEnd)
req = GET(URL)
req
reqParse = httr::content(req, as="parsed")
reqParse = parse_null(reqParse, parcelID)
urls = character()
imgs = character()
dataInt = character()
dataSimp = character()
orbit = character()
for(i in 1:length(reqParse)){
if(!is.null(reqParse[[i]]$originalImage)){
urls[i]=reqParse[[i]]$imageURL
imgs[i] = basename(reqParse[[i]]$originalImage)
imgs[i] = gsub(":", "_", imgs[i])
dataInt[i]=as.character(reqParse[[i]]$date)
dataSimp[i]=as.character(as.Date(reqParse[[i]]$date))
orbit[i]=as.character(reqParse[[i]]$orbit)
}
}
reqParse
library(terra)
library(whitebox)
# MAIN
data = Sys.Date()
data
library(RPostgreSQL)
library(DBI)
library(lubridate)
# DBs
beer_DB = "track_beer"
# variaveis fixas
tresh_vinho_750 = 660
tresh_beer_1L = 400
# liga a DB local entregaveis
connect_DB = function(DB_name){
dsn_database = DB_name  # Specify the name of your Database
# Specify host name e.g.:"aws-us-east-1-portal.4.dblayer.com"
dsn_hostname = "localhost"
dsn_port = "5432"                # Specify your port number. e.g. 98939
dsn_uid = "postgres"         # Specify your username. e.g. "admin"
dsn_pwd = "Estemailemeu00!"        # Specify your password. e.g. "xxx"
drv = dbDriver("PostgreSQL")
con = dbConnect(drv,
dbname = dsn_database, host=dsn_hostname,
port=dsn_port, user=dsn_uid,
password=dsn_pwd)
return(con)
}
insert_data_beer = function(Date, Liters, kcal){
record = get_data_beer(Date, Date)
if(nrow(record) == 0){
con = connect_DB(beer_DB)
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
dbDisconnect(con)
cat("Record inserted\n")
}else{
cat("Date already as a record\n")
}
}
get_data_beer = function(str_date, end_date){
con = connect_DB(beer_DB)
query = paste0(" SELECT * FROM beer_l WHERE date BETWEEN '", str_date, "' AND '", end_date, "'")
result = dbGetQuery(con, query)
dbDisconnect(con)
return(result)
}
get_month_stats_beer = function(month, year){
str_date = paste0(year, "-",month, "-01")
days_in_month = days_in_month(str_date)
end_date = paste0(year, "-",month, "-", days_in_month)
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_month)
avr_ltrs = as.numeric(litres/days_in_month)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
}
get_year_stats_beer = function(year){
str_date = paste0(year, "-01-01")
end_date = paste0(year, "-12-31")
days_in_year = as.numeric(ymd(end_date) - ymd(str_date) + 1)
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_year)
avr_ltrs = as.numeric(litres/days_in_year)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
}
# MAIN
data = Sys.Date()
canecas = 2
medias = 6
minis = 0
mini20 = 0
vinho = 0 # percentagem 1 garrafa de 750 ml
total = (((canecas*0.5) + (medias*0.33) + (minis*0.25) + (mini20*0.2)) * tresh_beer_1L) + (vinho * tresh_vinho_750)
litros = total/tresh_beer_1L
litros
total
data
data
litros
total
insert_data_beer(data, litros, total)
total
litros
data
beer_DB
insert_data_beer(data, litros, total)
Q
Date=data
record = get_data_beer(Date, Date)
record
nrow(record) == 0
con = connect_DB(beer_DB)
library(RPostgreSQL)
library(DBI)
library(lubridate)
# DBs
beer_DB = "track_beer"
# variaveis fixas
tresh_vinho_750 = 660
tresh_beer_1L = 400
# liga a DB local entregaveis
connect_DB = function(DB_name){
dsn_database = DB_name  # Specify the name of your Database
# Specify host name e.g.:"aws-us-east-1-portal.4.dblayer.com"
dsn_hostname = "localhost"
dsn_port = "5432"                # Specify your port number. e.g. 98939
dsn_uid = "postgres"         # Specify your username. e.g. "admin"
dsn_pwd = "Estemailemeu00!"        # Specify your password. e.g. "xxx"
drv = dbDriver("PostgreSQL")
con = dbConnect(drv,
dbname = dsn_database, host=dsn_hostname,
port=dsn_port, user=dsn_uid,
password=dsn_pwd)
return(con)
}
insert_data_beer = function(Date, Liters, kcal){
record = get_data_beer(Date, Date)
if(nrow(record) == 0){
con = connect_DB(beer_DB)
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
dbDisconnect(con)
cat("Record inserted\n")
}else{
cat("Date already as a record\n")
}
}
get_data_beer = function(str_date, end_date){
con = connect_DB(beer_DB)
query = paste0(" SELECT * FROM beer_l WHERE date BETWEEN '", str_date, "' AND '", end_date, "'")
result = dbGetQuery(con, query)
dbDisconnect(con)
return(result)
}
get_month_stats_beer = function(month, year){
str_date = paste0(year, "-",month, "-01")
days_in_month = days_in_month(str_date)
end_date = paste0(year, "-",month, "-", days_in_month)
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_month)
avr_ltrs = as.numeric(litres/days_in_month)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
}
get_year_stats_beer = function(year){
str_date = paste0(year, "-01-01")
end_date = paste0(year, "-12-31")
days_in_year = as.numeric(ymd(end_date) - ymd(str_date) + 1)
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_year)
avr_ltrs = as.numeric(litres/days_in_year)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
}
# MAIN
canecas = 2
medias = 6
minis = 0
mini20 = 0
vinho = 0 # percentagem 1 garrafa de 750 ml
total = (((canecas*0.5) + (medias*0.33) + (minis*0.25) + (mini20*0.2)) * tresh_beer_1L) + (vinho * tresh_vinho_750)
litros = total/tresh_beer_1L
data = Sys.Date()
insert_data_beer(data, litros, total)
Date
Liters=litros
kcal=total
record = get_data_beer(Date, Date)
if(nrow(record) == 0){
con = connect_DB(beer_DB)
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
dbDisconnect(con)
cat("Record inserted\n")
}else{
cat("Date already as a record\n")
}
nrow(record) == 0
con = connect_DB(beer_DB)
con
con = connect_DB(beer_DB)
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(Date, Liters, kcal)
)
record
record = get_data_beer(date, date)
if(nrow(record) == 0){
con = connect_DB(beer_DB)
dbSendQuery(
con,
"INSERT INTO beer_l (date, liters, kcal) VALUES ($1,$2,$3);",
list(date, liters, kcal)
)
dbDisconnect(con)
cat("Record inserted\n")
}else{
cat("Date already as a record\n")
}

days_in_year = as.numeric(ymd(end_date) - ymd(str_date) + 1)
data = get_data_beer(str_date, end_date)
kcal = sum(data$kcal)
litres = sum(data$liters)
avr_kcal = as.numeric(kcal/days_in_year)
avr_ltrs = as.numeric(litres/days_in_year)
cat("Total kcal: ", kcal, " Total litres: ", litres, "\n")
cat("Average kcal: ", avr_kcal, " Average litres: ", avr_ltrs, "\n")
}
# MAIN
canecas = 4
medias = 3
minis = 0
mini20 = 0
vinho = 0 # percentagem 1 garrafa de 750 ml
kcal = (((canecas*0.5) + (medias*0.33) + (minis*0.25) + (mini20*0.2)) * tresh_beer_1L) + (vinho * tresh_vinho_750)
liters = kcal/tresh_beer_1L
Sys.Date()
date = as.character(Sys.Date()-1)
date
insert_data_beer(date, liters, kcal)
# get stats by demand
get_month_stats_beer(2, 2025)
get_year_stats_beer(2025)
# get stats by demand
get_month_stats_beer(1, 2025)
# get stats by demand
get_month_stats_beer(2, 2025)
get_year_stats_beer(2025)
rRedis
rRedis$LLEN(queue)
rRedis = redux::hiredis(redis_config(host="localhost", port=6380, timeout = 60 * 1000))
rRedis$LLEN(queue)
parcelID = 133995
year = 2024
month = 11
n_months = 3
index = "RADAR_VV"
fold_b = "D:/AgroInsider/Projectos/Temp_Folder/municipios_radar/teste3meses/"
dir.create(fold_b, recursive = T)
difs = set_dif(parcelID, year, month, n_months, index, fold_b)
terra::writeRaster(difs$desc, file.path(fold_b, paste0("Evora_", index, "_dsc_", year, '_', month, ".tif")))
terra::writeRaster(difs$asc, file.path(fold_b, paste0("Evora_", index, "_asc_", year, '_', month, ".tif")))
year = 2023
month = 11
n_months = 3
index = "RADAR_VV"
fold_b = "D:/AgroInsider/Projectos/Temp_Folder/municipios_radar/teste3meses/"
dir.create(fold_b, recursive = T)
rm(difs)
gc()
parcelID = 133995
year = 2023
month = 11
n_months = 3
index = "RADAR_VV"
fold_b = "D:/AgroInsider/Projectos/Temp_Folder/municipios_radar/teste3meses/"
dir.create(fold_b, recursive = T)
difs = set_dif(parcelID, year, month, n_months, index, fold_b)
terra::writeRaster(difs$desc, file.path(fold_b, paste0("Evora_", index, "_dsc_", year, '_', month, ".tif")))
terra::writeRaster(difs$asc, file.path(fold_b, paste0("Evora_", index, "_asc_", year, '_', month, ".tif")))
rm(difs)
gc()
difs = set_dif(parcelID, year, month, n_months, index, fold_b)
parcelID = 133994
year = 2024
month = 12
n_months = 3
index = "RADAR_VH"
fold_b = "D:/AgroInsider/Projectos/Temp_Folder/municipios_radar/teste3meses/"
dir.create(fold_b, recursive = T)
difs = set_dif(parcelID, year, month, n_months, index, fold_b)
terra::writeRaster(difs$desc, file.path(fold_b, paste0("Avis_", index, "_dsc_", year, '_', month, ".tif")))
terra::writeRaster(difs$asc, file.path(fold_b, paste0("Avis_", index, "_asc_", year, '_', month, ".tif")))
rm(difs)
gc()
year = 2022
difs = set_dif(parcelID, year, month, n_months, index, fold_b)
terra::writeRaster(difs$desc, file.path(fold_b, paste0("Avis_", index, "_dsc_", year, '_', month, ".tif")))
terra::writeRaster(difs$asc, file.path(fold_b, paste0("Avis_", index, "_asc_", year, '_', month, ".tif")))
rm(difs)
gc()
gc()
library(ggvis)
library(randomForest)
library(gmodels)
library(rgeos)
library(rgdal)
library(tools)
#library(openxlsx)
library(lubridate)
library(terra)
library(httr)
temp_fold = "/services/model_mun/rast_temp/"
final_fold = "/services/model_mun/rast_final/"
model_file = "/services/model_mun/model_mun.rds"
download_raster=function(url, oriImg){
#url = paste0(out$URL[1], "ee")
#file.save =last(unlist(strsplit(url, "/")))
#file.save=str_c(fold_save, unlist(strsplit(file.save,".tif"))[1],".tif")
#file.save=gsub("%3A","_",file.save)
#file.save = str_c(fold_save, oriImg)
if(!file.exists(oriImg)){
tryCatch(
{
download.file(url, oriImg, quiet = TRUE, mode = "wb")
},
error=function(error_message){
print(paste0("Error Downloading: ", url))
return(NULL)
})
}else{
return(0)
}
}
# aux function. If URL code not 200, return NULL and print code
error_code = function(URL){
if(!URL$status_code == 200){
print(paste0("Error - status ", URL$status_code))
return(NULL)
}else{
return(URL$status_code)
}
}
# aux function. If parse request is null, check ID
parse_null = function(reqParse, parcelID){
if(is.null(reqParse)){
print( paste0("Parcel ", parcelID," not found - check ID") )
return(NULL)
}else{
return(reqParse)
}
}
check_Tifs=function(parcelID = 129466, band = "NDVI", dateStart = "2023-01-01", dateEnd="2023-12-31"){
dateEnd = as.Date(dateEnd) + 1
tryCatch({
URL = "https://api.agroinsider.com/agroinsider/api/agromap/0/parcel/images/B8LPnL!_tsF&pM/"
URL = paste0(URL,parcelID,"/",band,"/",dateStart,"/",dateEnd)
req = GET(URL)
if(is.null(error_code(req))){
return(NULL)
}
reqParse = httr::content(req, as="parsed")
reqParse = parse_null(reqParse, parcelID)
urls = character()
imgs = character()
dataInt = character()
dataSimp = character()
orbit = character()
for(i in 1:length(reqParse)){
if(!is.null(reqParse[[i]]$originalImage)){
urls[i]=reqParse[[i]]$imageURL
imgs[i] = basename(reqParse[[i]]$originalImage)
imgs[i] = gsub(":", "_", imgs[i])
dataInt[i]=as.character(reqParse[[i]]$date)
dataSimp[i]=as.character(as.Date(reqParse[[i]]$date))
orbit[i]=as.character(reqParse[[i]]$orbit)
}
}
if(band == "RADAR_VV" | band == "RADAR_VH"){
df_out=data.frame(cbind(as.character(urls), imgs, dataInt, dataSimp, orbit))
names(df_out) = c("URL", "OriginalImage" ,"Date", "SimpleDate", "Orbit")
}else{
df_out=data.frame(cbind(as.character(urls), imgs, dataInt, dataSimp))
names(df_out) = c("URL", "OriginalImage" ,"Date", "SimpleDate")
}
return(df_out)
},
error=function(error_message){
return(NULL)
})
}
# com o intuito de gerar uma imagem min, max ou mean de um mes
get_math_raster = function(parcelID, index, start_date, end_date, path_save, math){
for(i in index){
if(!exists("tifs")){
tifs = check_Tifs(parcelID, i, start_date, end_date)
}else{
aux_tifs = check_Tifs(parcelID, i, start_date, end_date)
tifs = rbind(tifs, aux_tifs)
}
}
for(i in 1:nrow(tifs)){
tifs$month[i] = strsplit(tifs$SimpleDate[i], "-")[[1]][2]
}
tif_paths = c()
for(n in 1:nrow(tifs)){
print(n)
try({
print("ok")
nameRast = file.path(path_save, tifs$OriginalImage[n])
rast = download_raster(tifs$URL[n], nameRast)
tif_paths = c(tif_paths, nameRast)
})
}
st = terra::rast(tif_paths)
if(math == "max"){
tif = max(st)
}else if(math == "min"){
tif = min(st)
}else if(math == "mean"){
tif = mean(st)
}
if(index %in% c("NDVI", "MOISTURE_INDEX")){
tif[tif>1,] = NA
tif[tif<-1,] = NA
}
for(p in tif_paths){
file.remove(p)
}
return(tif)
}
# index = ["NDVI", "MOISTURE_INDEX","RADAR_VH", "RADAR_VV"]
# cria pasta com imagens mensais de indexs
make_class_rast = function(parcelID, index, year, path_save){
dir.create(path_save, recursive = T)
for(i in 1:12){
if(i<10){
i = paste0(0, i)
}
strt = paste0(year, "-", i, "-01")
end = paste0(year, "-", i, "-", days_in_month(ymd(strt)))
nameMax = file.path(path_save, paste0("M_", i, "_", index[1],".tif"))
if(!file.exists(nameMax)){
if(index %in% c("NDVI", "MOISTURE_INDEX")){
tif = get_math_raster(parcelID, index, strt, end, path_save, "max")
}else{
tif = get_math_raster(parcelID, index, strt, end, path_save, "mean")
}
terra::writeRaster(tif, nameMax)
}
}
maxs = list.files(path_save, pattern = paste0(index, ".tif$"), full.names = T)
for(i in 2:length(maxs)){
nameSub = file.path(path_save, paste0("S_", i-1, "_", index[1], ".tif"))
if(!file.exists(nameSub)){
sub = terra::rast(maxs[i]) - terra::rast(maxs[i-1])
terra::writeRaster(sub, nameSub)
}
}
nameSub = file.path(path_save, paste0("S_81_", index[1],".tif"))
if(!file.exists(nameSub)){
sub = terra::rast(maxs[8]) - terra::rast(maxs[1])
terra::writeRaster(sub, nameSub)
}
nameSub = file.path(path_save, paste0("S_84_", index[1],".tif"))
if(!file.exists(nameSub)){
sub = terra::rast(maxs[8]) - terra::rast(maxs[4])
terra::writeRaster(sub, nameSub)
}
return(path_save)
}
# cria um data frame com dados para treino e teste
make_dataframe = function(in_shp_path, list_rast_dirs){
df = data.frame()
shp = terra::vect(in_shp_path)
ocups = unique(shp$class)
print(ocups)
dirs = list_rast_dirs
#dirs = dirs[-1]
for(d in dirs){
print(d)
rast_files = list.files(d, pattern = ".tif$", full.names = T)
print(rast_files)
all_rasts = terra::rast(rast_files)
names(all_rasts) = tools::file_path_sans_ext( basename(rast_files) )
for(o in ocups){
try({
#rast = terra::rast(rast_files[r])
aux_ocup = shp[shp$class == o, ]
vals = na.omit(terra::values(terra::mask(all_rasts, aux_ocup)))
vals = as.data.frame(vals)
vals$class = o
print(nrow(vals))
if(! exists("cols")){
cols = vals
}else{
cols = rbind(cols, vals)
}
print(nrow(cols))
})
}
if(exists("cols")){
df = rbind(df, cols)
print(nrow(df))
rm(cols)
}
}
return(df)
}
check_shp_encoding = function(in_shp_file){
cpg = gsub(".shp", ".CPG", in_shp_file)
enc = names(read.delim(cpg))
df = data.frame(read = c("UTF.8", "ANSI.1252"),enc = c("UTF-8", "WINDOWS-1252"))
if(enc %in% df$read){
return(df$enc[df$read == enc])
}
return("UTF-8")
}
splitTrainTest = function(in_df, probX = c(0.7, 0.3)){
set.seed(12)
ind = sample(2, nrow(in_df), replace=TRUE, prob=probX)
trainSet = in_df[ind==1,]
testSet = in_df[ind==2,]
return(list(trainSet = trainSet, testSet = testSet))
}
train_and_test = function(in_split){
# rf = randomForest(as.factor(class) ~ ., data=in_split$trainSet)
# pred = terra::predict(rf, newdata=in_split$testSet)
rf = ranger(as.factor(class) ~ ., data = in_split$trainSet, classification = TRUE)
pred = terra::predict(rf, data=in_split$testSet)
ct = CrossTable(x = in_split$testSet$class, y = pred$predictions, prop.chisq=FALSE)
return(list(model = rf, mc = ct))
}
custom_predict = function(model, data) {
# Convert raster data to a data frame
df = as.data.frame(data)
# Perform prediction using the ranger model
pred = predict(model, data = df)
# Return predictions (adjust based on model type)
if ("probabilities" %in% names(pred)) {
return(pred$probabilities[, 1])  # Example: return probabilities for the first class
} else {
return(pred$predictions)  # Regression or class labels
}
}
terra_addStack = function(in_stc, in_rast, method = "near"){
# align resolution
in_rast = resample(in_rast, in_stc, method = method)
# align extents
in_rast = extend(in_rast, in_stc)
in_stc = c(in_stc, in_rast)
return(in_stc)
# merge = terra::rast(rast_list[1])
# for(i in 2:length(rast_list)){
#   m_aux = terra::rast(rast_list[i])
#   m_aux = terra::extend(m_aux, merge)
#   merge = terra::extend(merge, m_aux)
#   m_aux = terra::resample(m_aux, merge, method = "near")
#   merge = terra::cover(merge, m_aux)
# }
#
#
# terra::project()
# rasterR=projectRaster(rasterR, stackR[[1]])
}
terra_align = function(rast1, rast2, method = "near"){
# align resolution
rast1 = terra::resample(rast1, rast2, method = method)
# align extents
rast1 = terra::extend(rast1, rast2)
return(rast1)
}
terraStk_NApix = function(in_stk){
na_pixels = terra::app(in_stk, function(x) {
if(any(is.na(x))){
return(NA)
}else{
return(1)
}
})
return(na_pixels)
}
base_stack = function(parcelID, ano, out_f){
meses = seq(1, 12, 1)
tifs = check_Tifs(parcelID, "NDVI", paste0(ano, "-01-01"), paste0(ano, "-12-31"))
cat("Number of images: ", nrow(tifs), "\n")
stc = terra::rast()
for(i in 1:length(meses)){
cat('Start month: ', meses[i], "\n")
mes = as.character(meses[i])
if(meses[i]<10){
mes = paste0("0", meses[i])
}
select_tifs = tifs[sapply(tifs$SimpleDate, function(x){
strsplit(x, "-")[[1]][2]==mes
} ),]
stc_aux = terra::rast()
for( s in 1:nrow(select_tifs)){
try({
out_file = file.path(out_f, select_tifs$OriginalImage[s])
cat(out_file, "\n")
download_raster(select_tifs$URL[s], out_file)
aux_rast = terra::rast(out_file)
if(s != 1){
aux_rast = terra_align(aux_rast, stc_aux[[1]], method = "near")
#aux_rast = mask(aux_rast, aux_mask)
}
stc_aux = c(stc_aux, aux_rast)
})
}
max = max(stc_aux, na.rm = T)
if(i != 1){
max = terra_align(max, stc[[1]], method = "near")
#aux_rast = mask(aux_rast, aux_mask)
}
stc = c(stc, max)
}
df_names = c("Jan", "Fev", "Mar", "Abr", "Mai", "Jun",
"Jul", "Ago", "Set", "Out", "Nov", "Dez")
names(stc) = df_names
return(stc)
}
modal_custom = function(x) {
ux = unique(x)
return(ux[which.max(tabulate(match(x, ux)))])
}
set_meses = function(year, month, n_months){
str_date = paste0(year, "-",month, "-01")
days_in_month = days_in_month(str_date)
end_date = paste0(year, "-",month, "-", days_in_month)
list_m = list()
list_m[[length(list_m)+1]] = c(str_date, end_date)
for(i in 2:n_months){
month = month - 1
if(month==0){
month = 12
year = year - 1
}
str_date = paste0(year, "-",month, "-01")
days_in_month = days_in_month(str_date)
end_date = paste0(year, "-",month, "-", days_in_month)
list_m[[length(list_m)+1]] = c(str_date, end_date)
}
return(rev(list_m))
}
max_index = function(in_tif_list){
stc_aux = terra::rast()
for(i in 1:nrow(in_tif_list)){
out_file = file.path(fold_b, in_tif_list$OriginalImage[i])
cat(out_file, "\n")
download_raster(in_tif_list$URL[i], out_file)
aux_rast = terra::rast(out_file)
if(i != 1){
aux_rast = terra_align(aux_rast, stc_aux[[1]], method = "near")
#aux_rast = mask(aux_rast, aux_mask)
}
stc_aux = c(stc_aux, aux_rast)
}
max_tifs = max(stc_aux, na.rm = T)
return(max_tifs)
}
set_dif = function(parcelID, year, month, n_months, index, fold_b){
orbs = c("DESCENDING", "ASCENDING")
dir.create(fold_b, recursive = T)
meses = set_meses(year, month, n_months)
tifs = check_Tifs(parcelID, index, meses[[1]][1], meses[[length(meses)]][length(meses[[length(meses)]])])
meses_pre = set_meses(year-1, month, n_months)
tifs_pre = check_Tifs(parcelID, index, meses_pre[[1]][1], meses_pre[[length(meses_pre)]][length(meses_pre[[length(meses_pre)]])])
#rm(stacks_desc, stacks_asc)
for(i in orbs){
tifs_sel = tifs[tifs$Orbit == i,]
max_tif = max_index(tifs_sel)
if(i == "DESCENDING"){
desc = max_tif
# if(exists("stacks_desc", inherits = FALSE)){
#
#   max_tif = terra_align(max_tif, stacks_desc[[1]], method = "near")
#   #aux_rast = mask(aux_rast, aux_mask)
# }
# stacks_desc = terra::rast()
# stacks_desc = c(stacks_desc, max_tifs)
}else{
asc = max_tif
# if(exists("stacks_asc", inherits = FALSE)){
#   max_tif = terra_align(max_tif, stacks_asc[[1]], method = "near")
#   #aux_rast = mask(aux_rast, aux_mask)
# }
# stacks_asc = terra::rast()
# stacks_asc = c(stacks_asc, max_tifs)
}
rm(max_tif)
gc()
}
for(i in orbs){
tifs_sel = tifs_pre[tifs_pre$Orbit == i,]
max_tif = max_index(tifs_sel)
if(i == "DESCENDING"){
desc_pre = max_tif
}else{
asc_pre = max_tif
}
rm(max_tif)
gc()
}
if(exists("desc") && exists("desc_pre")){
dif_desc = desc - desc_pre
}
if(exists("asc") && exists("asc_pre")){
dif_asc = asc - asc_pre
}
return(list(desc = dif_desc, asc = dif_asc))
}
parcelID = 133994
year = 2022
month = 12
n_months = 3
index = "RADAR_VH"
fold_b = "D:/AgroInsider/Projectos/Temp_Folder/municipios_radar/teste3meses/"
dir.create(fold_b, recursive = T)
difs = set_dif(parcelID, year, month, n_months, index, fold_b)
terra::writeRaster(difs$desc, file.path(fold_b, paste0("Avis_", index, "_dsc_", year, '_', month, ".tif")))
terra::writeRaster(difs$asc, file.path(fold_b, paste0("Avis_", index, "_asc_", year, '_', month, ".tif")))
setwd("C:/Users/LGP/code/ldtr")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(ldtr)
devtools::install_gitlab(lgplgp/ldtr)
devtools::install_gitlab("lgplgp/ldtr")
